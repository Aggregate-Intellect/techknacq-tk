#!/usr/bin/env python3

import sys

from nltk.stem import WordNetLemmatizer

from t.conceptgraph import ConceptGraph


# Available role annotations:
# - 'Empirical results'
# - 'Reference work'
# - 'Resource'
# - 'Software manual' (rare)
# - 'Survey'
# - 'Tutorial'


# Parameters

THRESHOLD = 0.01
MAX_MATCHES = 6


# User model constants

BEGINNER = 1
INTERMEDIATE = 2
ADVANCED = 3


class ReadingList:
    def __init__(self, cg, query, user_model, docs=True):
        self.query = set(query)

        self.lemmatizer = WordNetLemmatizer()
        self.query_lemmas = set([self.lemmatizer.lemmatize(x)
                                 for x in self.query])

        self.cg = cg
        self.user_model = user_model
        self.covered_concepts = set()
        self.covered_documents = set()
        self.covered_titles = set()
        self.relevance = {c: self.score_match(c) for c in cg.concepts()}
        self.rl = []

        self.docs = docs

        for c, score in sorted(self.relevance.items(), key=lambda x: x[1],
                               reverse=True)[:MAX_MATCHES]:
            entry = self.traverse(c, score)
            if entry:
                self.rl.append(entry)


    def traverse(self, c, score, depth=1):
        if score < THRESHOLD or c in self.covered_concepts:
            return

        if depth == MAX_MATCHES:
            return

        self.covered_concepts.add(c)

        entry = {'id': c,
                 'name': self.cg.name(c),
                 'score': score,
                 'documents1': [],
                 'subconcepts': [],
                 'documents2': []}

        # First compute any dependencies we'll include in the reading list
        # so we know which documents we want to include at this level.
        if self.user_model[c] != ADVANCED:
            for dep, dep_weight in sorted(self.cg.topic_deps(c),
                                          key=lambda x:
                                          score*x[1] + self.relevance[x[0]],
                                          reverse=True)[:MAX_MATCHES]:
                dep_entry = self.traverse(dep, score*dep_weight +
                                          self.relevance[dep], depth+1)
                if dep_entry:
                    entry['subconcepts'].append(dep_entry)

        if not self.docs:
            return entry

        related_docs = self.cg.topic_docs(c)

        # Documents to print before the dependencies.
        for doc_id, doc_weight in related_docs:
            if doc_id in self.covered_documents or \
               self.cg.g.node[doc_id]['title'] in self.covered_titles:
                continue

            roles = self.cg.g.node[doc_id]['roles']
            if (self.user_model[c] != ADVANCED or entry['subconcepts']) and \
               ('Survey' in roles or 'Reference work' in roles):
                entry['documents1'].append(self.doc_entry(doc_id, doc_weight))
                self.covered_documents.add(doc_id)
                self.covered_titles.add(self.cg.g.node[doc_id]['title'])
                break

            if self.user_model[c] == ADVANCED and 'Survey' in roles:
                entry['documents1'].append(self.doc_entry(doc_id, doc_weight))
                self.covered_documents.add(doc_id)
                self.covered_titles.add(self.cg.g.node[doc_id]['title'])
                break


        # Documents to print after the dependencies, if there were any.
        doc2_count = 0
        if entry['subconcepts']:
            for doc_id, doc_weight in self.cg.topic_docs(c):
                if doc_id in self.covered_documents or \
                  self.cg.g.node[doc_id]['title'] in self.covered_titles:
                    continue

                roles = self.cg.g.node[doc_id]['roles']
                if 'Empirical results' or 'Tutorial' in roles:
                    entry['documents2'].append(self.doc_entry(doc_id,
                                                              doc_weight))
                    self.covered_documents.add(doc_id)
                    self.covered_titles.add(self.cg.g.node[doc_id]['title'])
                    break
        elif self.user_model[c] == ADVANCED:
            for doc_id, doc_weight in self.cg.topic_docs(c):
                if doc_id in self.covered_documents or \
                   self.cg.g.node[doc_id]['title'] in self.covered_titles:
                    continue

                roles = self.cg.g.node[doc_id]['roles']
                if 'Empirical results' not in roles:
                    continue

                entry['documents2'].append(self.doc_entry(doc_id, doc_weight))
                self.covered_documents.add(doc_id)
                self.covered_titles.add(self.cg.g.node[doc_id]['title'])
                doc2_count += 1
                if doc2_count == 2:
                    break

        return entry


    def doc_entry(self, doc_id, doc_weight):
        """Return the reading list entry for the specified document, which
        was selected with the specified weight."""
        return {'id': doc_id,
                'score': doc_weight,
                'type': 'unknown',
                'title': self.cg.g.node[doc_id]['title'],
                'authors': self.cg.g.node[doc_id]['authors'],
                'book': self.cg.g.node[doc_id]['book'],
                'year': self.cg.g.node[doc_id]['year']}


    def print(self, rl=None, depth=1, format='text'):
        if rl is None:
            rl = self.rl

        if format == 'html':
            print('<dl>')

        for entry in rl:
            if format == 'html':
                print('<dt>%s &ndash; %.4f</dt>' % (entry['name'],
                                                    entry['score']))
                print('<dd>')
            else:
                print()
                print('  '*depth + '%s -- %.4f' % (entry['name'],
                                                   entry['score']))

            if format == 'html':
                print('<ul>')
            for doc in entry['documents1']:
                self.print_doc(doc['id'], depth, format=format)
            if format == 'html':
                print('</ul>')

            self.print(entry['subconcepts'], depth + 1, format=format)
            if entry['subconcepts']:
                print()

            if format == 'html':
                print('<ul>')
            for doc in entry['documents2']:
                self.print_doc(doc['id'], depth, format=format)
            if format == 'html':
                print('</ul>')
                print('</dd>')

        if format == 'html':
            print('</dl>')

    def print_doc(self, doc_id, depth, format='text'):
        if format == 'html':
            print('<li>')

        if format == 'html':
            pass
        else:
            print('  '*depth + '-', end=' ')

        if len(self.cg.g.node[doc_id]['authors']) > 3:
            print(self.cg.g.node[doc_id]['authors'][0] + ' et al.:')
        elif self.cg.g.node[doc_id]['authors']:
            print('; '.join(self.cg.g.node[doc_id]['authors']) + ':')
        else:
            print('  '*depth + '- Unknown:')

        if format == 'html':
            print('<a href="' + self.cg.g.node[doc_id]['url'] + '">')

        if len(self.cg.g.node[doc_id]['title']) > 70:
            print('  '*depth + '  ' + self.cg.g.node[doc_id]['title'][:70] +
                  '...')
        else:
            print('  '*depth + '  ' + self.cg.g.node[doc_id]['title'])

        if format == 'html':
            print('</a>')

        if format == 'html':
            print('</li>')


    def score_match(self, c, fuzzy=False):
        """Score the relevance of a concept to a query based on lexical
        overlap. If `fuzzy` is False, use strict matching rather than
        lemmatizing."""

        mentions = self.cg.g.node[c]['mentions']
        score = 0.0
        for word, weight in self.cg.g.node[c]['words']:
            # Each match is scored as the % of distinct words the query
            # and the feature share * weight of the feature in the topic, e.g.,
            # - Query: 'knowledge'
            #   Topic feature: ('knowledge_base', 323)
            #   Return: (1/2) * (323 / topic_mentions)
            # - Query: 'knowledge base generation'
            #   Topic feature: ('data base', 323)
            #   Return: (1/4) * (323 / topic_mentions)
            words = set(word.split('_'))
            all_words = self.query | words
            common = self.query & words
            score += (len(common)/len(all_words)) * (weight/mentions)
            if fuzzy:
                words_lemmas = set([self.lemmatizer.lemmatize(x)
                                    for x in words])
                all_words = self.query_lemmas | words_lemmas
                common = self.query_lemmas & words_lemmas
                score += .75 * (len(common)/len(all_words)) * (weight/mentions)
        return score


if __name__ == '__main__':
    if len(sys.argv) < 3:
        sys.stderr.write('Usage: reading-list [concept graph] [query terms]\n')
        sys.exit(1)

    output_format = 'html'

    cg = ConceptGraph(sys.argv[1])

    query = sys.argv[2:]

    if output_format == 'html':
        print("""
<html>
<head>
<title>Reading List</title>
<style type="text/css">
body {
  font: 12pt 'Univers LT Std', 'Helvetica Neue', Helvetica, sans-serif;
  max-width: 600pt;
  margin: 4pc auto;
}
dl, dt, dd, ul, li { margin: 0; padding: 0; }
dt {
  margin-top: 12pt;
  font-weight: bold;
}
dd {
  margin-top: 6pt;
  margin-left: 1pt;
  border-left: 6pt solid #ccc;
  padding-left: 12pt;
}
li {
  list-style-type: none;
  margin-bottom: 6pt;
}
</style>
</head>
<body>
<h1>Reading List</h1>""")

    if output_format == 'html':
        print('<h2>Beginner</h2>')
    else:
        print('Beginner:')
    beginner_model = {}
    for c in cg.concepts():
        beginner_model[c] = BEGINNER
    r = ReadingList(cg, query, beginner_model)
    r.print(format=output_format)

    print()

    if output_format == 'html':
        print('<h2>Advanced</h2>')
    else:
        print('Advanced:')
    advanced_model = {}
    for c in cg.concepts():
        advanced_model[c] = ADVANCED
    r = ReadingList(cg, query, advanced_model)
    r.print(format=output_format)

    if format == 'html':
        print('</body></html>')
