#!/usr/bin/env python3

# T: Concept Graph
# Jonathan Gordon

import sys
import os
import tempfile
import random
import subprocess

from mallet import Mallet
from t.corpus import Corpus
from t.conceptgraph import ConceptGraph

# Parameters

MALLET_PATH = 'ext/mallet/bin/mallet'

LDA_TOPICS = 200
LDA_ITERATIONS = 1000

###

class TopicDependency:
    """Python wrapper class for Linhong's Java code for predicting dependencies
    among LDA topics."""

    jar = 'ext/topic-dependency/topic-dependency.jar'

    def __init__(self, corpus, model):
        self.corpus = corpus
        self.model = model

        rand_prefix = hex(random.randint(0, 0xffffff))[2:] + '-'
        self.prefix = os.path.join(tempfile.gettempdir(), rand_prefix)

        topic_key_file = model.tkfile
        doc_comp_file = self.convert_comp_file()
        citation_network_file = self.build_citation_network()
        infomap_tree_file = self.get_infomap_tree()

        cmd = ['java', '-jar', self.jar,
               topic_key_file, infomap_tree_file, doc_comp_file,
               str(LDA_TOPICS), citation_network_file]
        if subprocess.call(cmd) != 0:
            sys.stderr.write('Running topic-dependency code failed.\]n')
            sys.exit(1)


    def convert_comp_file(self):
        """Convert Mallet composition file to the format needed by the
        topic dependency code."""

        fname = self.prefix + 'concept2doc.txt'

        def pairwise(iterable):
            """s -> (s0,s1), (s2,s3), (s4, s5), ..."""
            a = iter(iterable)
            return zip(a, a)

        with open(fname, 'w') as fout:
            for line in open(self.model.dtfile):
                if line[0] == '#':
                    continue
                elts = line.strip().split('\t')[1:]
                fout.write(elts[0].replace('file:', ''))
                for tid, pct in sorted(pairwise(elts[1:]),
                                       key=lambda x: x[0]):
                    fout.write('\ttopic' + tid + ':' + pct)
                fout.write('\n')

        return fname


    def get_infomap_tree(self):
        fname = self.prefix + 'infomap-tree.txt'

        cmd = ['java', '-jar', 'ext/topic-dependency/infomap-input.jar',
               self.model.tkfile, self.model.cofile,
               self.prefix + 'infomap.net']
        if subprocess.call(cmd) != 0:
            sys.stderr.write('Formatting input for Infomap failed.\n')
            sys.exit(1)

        cmd = ['ext/topic-dependency/infomap/Infomap',
               '--flow-network', self.prefix + 'infomap.net',
               tempfile.gettempdir()]
        if subprocess.call(cmd) != 0:
            sys.stderr.write('Running Infomap failed.\]n')
            sys.exit(1)

        os.remove(self.prefix + 'infomap.net')
        os.remove(self.prefix + 'infomap.flow')
        os.rename(self.prefix + 'infomap.tree', fname)
        return fname


    def build_citation_network(self):
        fname = self.prefix + 'cite.txt'

        with open(fname, 'w') as fout:
            for doc in self.corpus.docs:
                for ref in doc.references:
                    fout.write('%s ==> %s\n' % (doc.id, ref))

        return fname

###


if __name__ == '__main__':
    #if len(sys.argv) != 2:
    #    print('Usage: concept-graph [corpus dir.]', file=sys.stderr)
    #    sys.exit(1)

    #rand_prefix = hex(random.randint(0, 0xffffff))[2:] + '-'
    #prefix = os.path.join(tempfile.gettempdir(), rand_prefix)

    cg = ConceptGraph()

    corpus = Corpus(sys.argv[1])
    #corpus.fix_text()

    #cg.add_docs(corpus)

    #mallet_corpus = prefix + 'corpus'
    #os.makedirs(mallet_corpus)
    #corpus.export(mallet_corpus, abstract=True, format='bigrams')
    #corpus.clear()

    #model = Mallet(MALLET_PATH, mallet_corpus, num_topics=LDA_TOPICS,
    #               iters=LDA_ITERATIONS)

    #cg.add_concepts(model.topics)

    model = Mallet(MALLET_PATH, prefix=sys.argv[2])

    dep = TopicDependency(corpus, model)
