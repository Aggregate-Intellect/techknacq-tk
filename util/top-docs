#!/usr/bin/env python3

# Print the most relevant documents for each topic in the concept graph
# This script is used for comparing the methods of computing document
# relevance that can be used in generating a concept graph.

import sys

from collections import defaultdict

from t.conceptgraph import ConceptGraph


def print_doc(cg, doc_id, depth=1):
    if len(cg.g.node[doc_id]['authors']) > 3:
        print('  '*depth + '- ' +
              cg.g.node[doc_id]['authors'][0] + ' et al.:')
    elif cg.g.node[doc_id]['authors']:
        print('  '*depth + '- ' +
              '; '.join(cg.g.node[doc_id]['authors']) + ':')
    else:
        print('  '*depth + '- Unknown:')

    if len(cg.g.node[doc_id]['title']) > 70:
        print('  '*depth + '  ' + cg.g.node[doc_id]['title'][:70] +
              '...')
    else:
        print('  '*depth + '  ' + cg.g.node[doc_id]['title'])


if __name__ == '__main__':
    cg = ConceptGraph(sys.argv[1])

    for c in sorted(cg.concepts()):
        name = cg.name(c)
        if name == 'Bad': continue
        print(c, cg.name(c))
        for doc_id, weight in cg.topic_docs(c)[:5]:
            print_doc(cg, doc_id)
